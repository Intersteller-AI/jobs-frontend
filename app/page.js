"use client";
import { useEffect } from "react";

export default function Home() {
  useEffect(() => {
    let peerConnection = new RTCPeerConnection();
    let localStream;
    let remoteStream;

    let init = async () => {
      // user side
      localStream = await navigator.mediaDevices.getUserMedia({
        video: true,
        audio: false,
      });
      document.getElementById("user-1").srcObject = localStream;
      localStream.getTracks().forEach((track) => {
        peerConnection.addTrack(track, localStream);
      });

      // client side
      remoteStream = new MediaStream();
      document.getElementById("user-2").srcObject = remoteStream;
      peerConnection.ontrack = (event) => {
        event.streams[0].getTracks().forEach((track) => {
          remoteStream.addTrack(track);
        });
      };
    };

    let createOffer = async () => {
      peerConnection.onicecandidate = async (event) => {
        //Event that fires off when a new offer ICE candidate is created
        if (event.candidate) {
          document.getElementById("offer-sdp").value = JSON.stringify(
            peerConnection.localDescription
          );
        }
      };

      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
    };

    let createAnswer = async () => {
      let offer = JSON.parse(document.getElementById("offer-sdp").value);

      peerConnection.onicecandidate = async (event) => {
        //Event that fires off when a new answer ICE candidate is created
        if (event.candidate) {
          console.log("Adding answer candidate...:", event.candidate);
          document.getElementById("answer-sdp").value = JSON.stringify(
            peerConnection.localDescription
          );
        }
      };

      await peerConnection.setRemoteDescription(offer);

      let answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);
    };

    let addAnswer = async () => {
      console.log("Add answer triggerd");
      let answer = JSON.parse(document.getElementById("answer-sdp").value);
      console.log("answer:", answer);
      if (!peerConnection.currentRemoteDescription) {
        peerConnection.setRemoteDescription(answer);
      }
    };

    // init();

    // event listeners only working only for button click
    document
      .getElementById("create-offer")
      .addEventListener("click", createOffer);
    document
      .getElementById("create-answer")
      .addEventListener("click", createAnswer);
    document.getElementById("add-answer").addEventListener("click", addAnswer);
  }, []);

  return (
    <div>
      <div className="flex justify-center items-center gap-4 w-full h-screen">
        <video
          className="w-1/4 border border-blue-500"
          src=""
          id="user-1"
          autoPlay
          playsInline
        ></video>
        <video
          className="w-1/4 border border-blue-500"
          src=""
          id="user-2"
          autoPlay
          playsInline
        ></video>
      </div>
      <div className="w-[800px] mx-auto">
        <div className="step">
          <p>
            <strong>Step 1:</strong> User 1, click "Create offer" to generate
            SDP offer and copy offer from text area below.
          </p>
          <button
            className="px-4 py-2 bg-blue-500 hover:bg-blue-300 rounded-md"
            id="create-offer"
          >
            Create Offer
          </button>
        </div>

        <label>SDP OFFER:</label>
        <textarea
          className="border-2 p-2 w-full"
          id="offer-sdp"
          placeholder="User 2, paste SDP offer here..."
          rows={3}
        ></textarea>

        <div className="step">
          <p>
            <strong>Step 2:</strong> User 2, paste SDP offer generated by user 1
            into text area above, then click "Create Answer" to generate SDP
            answer and copy the answer from the text area below.
          </p>
          <button
            className="px-4 py-2 bg-blue-500 hover:bg-blue-300 rounded-md"
            id="create-answer"
          >
            Create answer
          </button>
        </div>

        <label>SDP Answer:</label>
        <textarea
          className="border-2 p-2 w-full"
          id="answer-sdp"
          placeholder="User 1, paste SDP answer here..."
        ></textarea>

        <div className="step">
          <p>
            <strong>Step 3:</strong> User 1, paste SDP offer generated by user 2
            into text area above and then click "Add Answer"
          </p>
          <button
            className="px-4 py-2 bg-blue-500 hover:bg-blue-300 rounded-md"
            id="add-answer"
          >
            Add answer
          </button>
        </div>
      </div>
    </div>
  );
}
